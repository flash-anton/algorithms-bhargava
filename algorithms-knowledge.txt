---- Общее -------------------------------------------------------------------------------------------------------------
! В книге допущено много опечаток на картинках (код, таблицы, структуры).

Скорости алгоритмов в порядке возрастания:
O(logN) - бинарный поиск.
O(N) - простой поиск.
O(N*logN) - быстрая сортировка со средним/случайным опорным элементом.
O(N*logN) - сортировка слиянием.
O(N^2) - сортировка выбором.
O(N!) - задача о коммивояжере.

Скорость операций со структурами данных:
        Массив Список ХэшМапа ХэшМапа
                      (средн) (худш)
Чтение   O(1)   O(N)   O(1)    O(N)
Вставка  O(N)   O(1)   O(1)    O(N)
Удаление O(N)   O(1)   O(1)    O(N)

Если O-скорости алгоритмов равны, то нужно сравнивать константы, затем остальные "незначительные" слагаемые.

---- 1. Бинарный поиск O(logN) -----------------------------------------------------------------------------------------
Бертся отсортированный массив.
Результат - индекс искомого элемента в массиве, либо null.
Берем массив - если искомый элемент равен центральному, то индекс найден, либо
  берем соответствующую половину массива - индекс найден, либо
    берем четвертину ... пока не найдется, либо не останется один элемент неравный искомому.
Худший случай - количество делений массива пополам, пока не останется 1 элемент - log от N по основанию 2.
Скорость алгоритма = O(logN).

---- 2. Сортировка выбором O(N^2) --------------------------------------------------------------------------------------
Делается N итераций: N сравнений + (N-1) сравнений + (N-2) + ... + 1.
Это равнозначно N/2 итерациям по (N+1) сравнений: ((N) + (1)) + ((N-1) + (2)) + ...
Сокрость алгоритма = O(N/2 * (N+1)) = O(1/2N^2 + 1/2N) = O(N^2 + N) = O(N^2)

---- 3. Рекурсия -------------------------------------------------------------------------------------------------------
Рекурсия - вызов себя, если не выполнено условие.
Хвостовая рекурсия - читать отдельно.
Упомянут стек.

---- 4. Быстрая сортировка O(N*logN) -----------------------------------------------------------------------------------
Упомянута стратегия "Разделяй и властвуй" - рекурсивный метод.
Быстрая сортировка использует стратегию "Разделяй и властвуй".
Берем массив
  - выбираем случайный опорный элемент
  - слева формируем массив из меньших элементов, справа - остальные
  - берем каждый из массивов по отдельности
    - выбираем опорный элемент
    - ...
      ...  пока массивы не станут размером 0, 1 или 2 (простые случаи)
  - конкатенируем левый массив, опорный элемент, правый массив.
O(N*logN) - средний и случайный случай, когда в качестве опорного берется случайный (не крайний) элемент.
O(N^2)    - худший случай, когда в качестве опорного берется крайний (минимальный/максимальный).

---- 5. Хэш-таблицы ----------------------------------------------------------------------------------------------------
Массив, в каждой ячейке которого список.
Ключ -> хэш-функция -> индекс ячейки массива (основа хэш-таблицы).
Если несколько ключей хешируются одинаково, то все они добавляются в список одной ячейки.
Увеличивать размер массива рекомендуется, когда коэффициент заполнения превышает 70%.
